datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String     @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  pins          Pin[]
  comments      Comment[]
}

model VerificationToken {
    id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pin {
    id  String  @id @default(auto()) @map("_id") @db.ObjectId
    title   String
    description     String
    destination     String?
    tags            String[]
    imageUrl        String
    imageHeight     Int
    imageWidth      Int
    userId          String @db.ObjectId
    createdAt       DateTime @default(now())
    likeIds         String[]    @db.ObjectId
    saveIds         String []   @db.ObjectId
    comments        Comment[]

    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
    id  String  @id @default(auto()) @map("_id") @db.ObjectId
    comment     String
    userId      String  @db.ObjectId
    pinId       String  @db.ObjectId
    createdAt   DateTime @default(now())

    user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
    pin     Pin @relation(fields: [pinId], references: [id], onDelete: Cascade)
}